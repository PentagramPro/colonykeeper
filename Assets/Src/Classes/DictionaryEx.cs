//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.17929
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

public class DictionaryEx<Tkey, Tval> : IDictionary<Tkey,Tval>
{
	public event EventHandler ItemAdded;
	public event EventHandler ItemRemoved;

	Dictionary<Tkey,Tval> dic = new Dictionary<Tkey, Tval>();

	#region IDictionary implementation
	public bool ContainsKey (Tkey key)
	{
		return dic.ContainsKey(key);
	}
	public void Add (Tkey key, Tval value)
	{
		dic.Add(key,value);
		if(ItemAdded!=null)
			ItemAdded(this,null);
	}
	public bool Remove (Tkey key)
	{
		bool res = dic.Remove(key);
		if(res && ItemRemoved!=null)
			ItemRemoved(this,null);

		return res;
	}
	public bool TryGetValue (Tkey key, out Tval value)
	{
		return dic.TryGetValue(key,out value);
	}
	public Tval this [Tkey key] {
		get {
			return dic[key];
		}
		set {
			dic[key]=value;
			if(ItemAdded!=null)
				ItemAdded(this,null);
		}
	}
	public ICollection<Tkey> Keys {
		get {
			return dic.Keys;
		}
	}
	public ICollection<Tval> Values {
		get {
			return dic.Values;
		}
	}
	#endregion
	#region ICollection implementation
	public void Add (KeyValuePair<Tkey, Tval> item)
	{

		dic.Add(item.Key,item.Value);
		if(ItemAdded!=null)
			ItemAdded(this,null);
	}
	public void Clear ()
	{
		dic.Clear();
		if(ItemRemoved!=null)
			ItemRemoved(this,null);
	}
	public bool Contains (KeyValuePair<Tkey, Tval> item)
	{

		return dic[item.Key].Equals(item.Value);
	}
	public void CopyTo (KeyValuePair<Tkey, Tval>[] array, int arrayIndex)
	{
		//dic.CopyTo(array,arrayIndex);
	}
	public bool Remove (KeyValuePair<Tkey, Tval> item)
	{
		bool res = false;
		if(Contains(item))
			res = dic.Remove(item.Key);

		if(res && ItemRemoved!=null)
			ItemRemoved(this,null);
		return res;
	}
	public int Count {
		get {
			return dic.Count;
		}
	}
	public bool IsReadOnly {
		get {
			return false;
		}
	}
	#endregion
	#region IEnumerable implementation
	public IEnumerator<KeyValuePair<Tkey, Tval>> GetEnumerator ()
	{
		return dic.GetEnumerator();
	}
	#endregion
	#region IEnumerable implementation
	System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator ()
	{
		return dic.GetEnumerator();
	}
	#endregion
	 
}

